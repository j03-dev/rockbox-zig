// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Album {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub artist: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub year: u32,
    #[prost(string, tag = "5")]
    pub year_string: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub album_art: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub md5: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub artist_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlbumList {
    #[prost(message, repeated, tag = "1")]
    pub albums: ::prost::alloc::vec::Vec<Album>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Artist {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub bio: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub image: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtistList {
    #[prost(message, repeated, tag = "1")]
    pub artists: ::prost::alloc::vec::Vec<Artist>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct File {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub time_write: u32,
    #[prost(bool, tag = "5")]
    pub is_directory: bool,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileList {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<File>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikedAlbum {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub artist: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub year: u32,
    #[prost(string, tag = "5")]
    pub year_string: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub album_art: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub md5: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub artist_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikedTrack {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub artist: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub album: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub album_artist: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub bitrate: u32,
    #[prost(string, tag = "8")]
    pub composer: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub disc_number: u32,
    #[prost(uint32, tag = "10")]
    pub filesize: u32,
    #[prost(uint32, tag = "11")]
    pub frequency: u32,
    #[prost(uint32, tag = "12")]
    pub length: u32,
    #[prost(uint32, tag = "13")]
    pub track_number: u32,
    #[prost(uint32, tag = "14")]
    pub year: u32,
    #[prost(string, tag = "15")]
    pub year_string: ::prost::alloc::string::String,
    #[prost(string, tag = "16")]
    pub genre: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub md5: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "18")]
    pub album_art: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub artist_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub album_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub genre_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "22")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "23")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikedAlbumList {
    #[prost(message, repeated, tag = "1")]
    pub albums: ::prost::alloc::vec::Vec<LikedAlbum>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikedTrackList {
    #[prost(message, repeated, tag = "1")]
    pub tracks: ::prost::alloc::vec::Vec<LikedTrack>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Track {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub artist: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub album: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub album_artist: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub bitrate: u32,
    #[prost(string, tag = "8")]
    pub composer: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub disc_number: u32,
    #[prost(uint32, tag = "10")]
    pub filesize: u32,
    #[prost(uint32, tag = "11")]
    pub frequency: u32,
    #[prost(uint32, tag = "12")]
    pub length: u32,
    #[prost(uint32, tag = "13")]
    pub track_number: u32,
    #[prost(uint32, tag = "14")]
    pub year: u32,
    #[prost(string, tag = "15")]
    pub year_string: ::prost::alloc::string::String,
    #[prost(string, tag = "16")]
    pub genre: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub md5: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "18")]
    pub album_art: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub artist_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub album_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub genre_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "22")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "23")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackList {
    #[prost(message, repeated, tag = "1")]
    pub tracks: ::prost::alloc::vec::Vec<Track>,
}
