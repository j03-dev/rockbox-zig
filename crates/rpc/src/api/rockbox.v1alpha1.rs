// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RockboxBrowseRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RockboxBrowseResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetContextRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetContextResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetEntriesRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetEntriesResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetEntryAtRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreeGetEntryAtResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BrowseId3Request {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BrowseId3Response {}
/// Generated client implementations.
pub mod browse_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct BrowseServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BrowseServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BrowseServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BrowseServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BrowseServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn rockbox_browse(
            &mut self,
            request: impl tonic::IntoRequest<super::RockboxBrowseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RockboxBrowseResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.BrowseService/RockboxBrowse",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.BrowseService", "RockboxBrowse"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn tree_get_context(
            &mut self,
            request: impl tonic::IntoRequest<super::TreeGetContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.BrowseService/TreeGetContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.BrowseService", "TreeGetContext"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn tree_get_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::TreeGetEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetEntriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.BrowseService/TreeGetEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.BrowseService", "TreeGetEntries"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn tree_get_entry_at(
            &mut self,
            request: impl tonic::IntoRequest<super::TreeGetEntryAtRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetEntryAtResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.BrowseService/TreeGetEntryAt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.BrowseService", "TreeGetEntryAt"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn browse_id3(
            &mut self,
            request: impl tonic::IntoRequest<super::BrowseId3Request>,
        ) -> std::result::Result<
            tonic::Response<super::BrowseId3Response>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.BrowseService/BrowseId3",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.BrowseService", "BrowseId3"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod browse_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BrowseServiceServer.
    #[async_trait]
    pub trait BrowseService: std::marker::Send + std::marker::Sync + 'static {
        async fn rockbox_browse(
            &self,
            request: tonic::Request<super::RockboxBrowseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RockboxBrowseResponse>,
            tonic::Status,
        >;
        async fn tree_get_context(
            &self,
            request: tonic::Request<super::TreeGetContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetContextResponse>,
            tonic::Status,
        >;
        async fn tree_get_entries(
            &self,
            request: tonic::Request<super::TreeGetEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetEntriesResponse>,
            tonic::Status,
        >;
        async fn tree_get_entry_at(
            &self,
            request: tonic::Request<super::TreeGetEntryAtRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeGetEntryAtResponse>,
            tonic::Status,
        >;
        async fn browse_id3(
            &self,
            request: tonic::Request<super::BrowseId3Request>,
        ) -> std::result::Result<
            tonic::Response<super::BrowseId3Response>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct BrowseServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> BrowseServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BrowseServiceServer<T>
    where
        T: BrowseService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rockbox.v1alpha1.BrowseService/RockboxBrowse" => {
                    #[allow(non_camel_case_types)]
                    struct RockboxBrowseSvc<T: BrowseService>(pub Arc<T>);
                    impl<
                        T: BrowseService,
                    > tonic::server::UnaryService<super::RockboxBrowseRequest>
                    for RockboxBrowseSvc<T> {
                        type Response = super::RockboxBrowseResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RockboxBrowseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrowseService>::rockbox_browse(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RockboxBrowseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.BrowseService/TreeGetContext" => {
                    #[allow(non_camel_case_types)]
                    struct TreeGetContextSvc<T: BrowseService>(pub Arc<T>);
                    impl<
                        T: BrowseService,
                    > tonic::server::UnaryService<super::TreeGetContextRequest>
                    for TreeGetContextSvc<T> {
                        type Response = super::TreeGetContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TreeGetContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrowseService>::tree_get_context(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TreeGetContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.BrowseService/TreeGetEntries" => {
                    #[allow(non_camel_case_types)]
                    struct TreeGetEntriesSvc<T: BrowseService>(pub Arc<T>);
                    impl<
                        T: BrowseService,
                    > tonic::server::UnaryService<super::TreeGetEntriesRequest>
                    for TreeGetEntriesSvc<T> {
                        type Response = super::TreeGetEntriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TreeGetEntriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrowseService>::tree_get_entries(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TreeGetEntriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.BrowseService/TreeGetEntryAt" => {
                    #[allow(non_camel_case_types)]
                    struct TreeGetEntryAtSvc<T: BrowseService>(pub Arc<T>);
                    impl<
                        T: BrowseService,
                    > tonic::server::UnaryService<super::TreeGetEntryAtRequest>
                    for TreeGetEntryAtSvc<T> {
                        type Response = super::TreeGetEntryAtResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TreeGetEntryAtRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrowseService>::tree_get_entry_at(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TreeGetEntryAtSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.BrowseService/BrowseId3" => {
                    #[allow(non_camel_case_types)]
                    struct BrowseId3Svc<T: BrowseService>(pub Arc<T>);
                    impl<
                        T: BrowseService,
                    > tonic::server::UnaryService<super::BrowseId3Request>
                    for BrowseId3Svc<T> {
                        type Response = super::BrowseId3Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BrowseId3Request>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrowseService>::browse_id3(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BrowseId3Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for BrowseServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.BrowseService";
    impl<T> tonic::server::NamedService for BrowseServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated client implementations.
pub mod metadata_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MetadataServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MetadataServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MetadataServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MetadataServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MetadataServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
    }
}
/// Generated server implementations.
pub mod metadata_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetadataServiceServer.
    #[async_trait]
    pub trait MetadataService: std::marker::Send + std::marker::Sync + 'static {}
    #[derive(Debug)]
    pub struct MetadataServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MetadataServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MetadataServiceServer<T>
    where
        T: MetadataService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for MetadataServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.MetadataService";
    impl<T> tonic::server::NamedService for MetadataServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayRequest {
    #[prost(int64, tag = "1")]
    pub elapsed: i64,
    #[prost(int64, tag = "2")]
    pub offset: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PauseRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PauseResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResumeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResumeResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NextRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NextResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PreviousRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PreviousResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FastForwardRewindRequest {
    #[prost(int32, tag = "1")]
    pub new_time: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FastForwardRewindResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StatusRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StatusResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurrentTrackRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurrentTrackResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FlushAndReloadTracksRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FlushAndReloadTracksResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFilePositionRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFilePositionResponse {
    #[prost(int32, tag = "1")]
    pub position: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HardStopRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HardStopResponse {}
/// Generated client implementations.
pub mod playback_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PlaybackServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PlaybackServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PlaybackServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PlaybackServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PlaybackServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn play(
            &mut self,
            request: impl tonic::IntoRequest<super::PlayRequest>,
        ) -> std::result::Result<tonic::Response<super::PlayResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Play",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Play"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn pause(
            &mut self,
            request: impl tonic::IntoRequest<super::PauseRequest>,
        ) -> std::result::Result<tonic::Response<super::PauseResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Pause",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Pause"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn resume(
            &mut self,
            request: impl tonic::IntoRequest<super::ResumeRequest>,
        ) -> std::result::Result<tonic::Response<super::ResumeResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Resume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Resume"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn next(
            &mut self,
            request: impl tonic::IntoRequest<super::NextRequest>,
        ) -> std::result::Result<tonic::Response<super::NextResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Next",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Next"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn previous(
            &mut self,
            request: impl tonic::IntoRequest<super::PreviousRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PreviousResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Previous",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Previous"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn fast_forward_rewind(
            &mut self,
            request: impl tonic::IntoRequest<super::FastForwardRewindRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FastForwardRewindResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/FastForwardRewind",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaybackService",
                        "FastForwardRewind",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/Status",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "Status"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn current_track(
            &mut self,
            request: impl tonic::IntoRequest<super::CurrentTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CurrentTrackResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/CurrentTrack",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "CurrentTrack"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn flush_and_reload_tracks(
            &mut self,
            request: impl tonic::IntoRequest<super::FlushAndReloadTracksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FlushAndReloadTracksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/FlushAndReloadTracks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaybackService",
                        "FlushAndReloadTracks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_file_position(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFilePositionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFilePositionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/GetFilePosition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaybackService",
                        "GetFilePosition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn hard_stop(
            &mut self,
            request: impl tonic::IntoRequest<super::HardStopRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HardStopResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaybackService/HardStop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaybackService", "HardStop"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod playback_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PlaybackServiceServer.
    #[async_trait]
    pub trait PlaybackService: std::marker::Send + std::marker::Sync + 'static {
        async fn play(
            &self,
            request: tonic::Request<super::PlayRequest>,
        ) -> std::result::Result<tonic::Response<super::PlayResponse>, tonic::Status>;
        async fn pause(
            &self,
            request: tonic::Request<super::PauseRequest>,
        ) -> std::result::Result<tonic::Response<super::PauseResponse>, tonic::Status>;
        async fn resume(
            &self,
            request: tonic::Request<super::ResumeRequest>,
        ) -> std::result::Result<tonic::Response<super::ResumeResponse>, tonic::Status>;
        async fn next(
            &self,
            request: tonic::Request<super::NextRequest>,
        ) -> std::result::Result<tonic::Response<super::NextResponse>, tonic::Status>;
        async fn previous(
            &self,
            request: tonic::Request<super::PreviousRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PreviousResponse>,
            tonic::Status,
        >;
        async fn fast_forward_rewind(
            &self,
            request: tonic::Request<super::FastForwardRewindRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FastForwardRewindResponse>,
            tonic::Status,
        >;
        async fn status(
            &self,
            request: tonic::Request<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status>;
        async fn current_track(
            &self,
            request: tonic::Request<super::CurrentTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CurrentTrackResponse>,
            tonic::Status,
        >;
        async fn flush_and_reload_tracks(
            &self,
            request: tonic::Request<super::FlushAndReloadTracksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FlushAndReloadTracksResponse>,
            tonic::Status,
        >;
        async fn get_file_position(
            &self,
            request: tonic::Request<super::GetFilePositionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFilePositionResponse>,
            tonic::Status,
        >;
        async fn hard_stop(
            &self,
            request: tonic::Request<super::HardStopRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HardStopResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct PlaybackServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PlaybackServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PlaybackServiceServer<T>
    where
        T: PlaybackService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rockbox.v1alpha1.PlaybackService/Play" => {
                    #[allow(non_camel_case_types)]
                    struct PlaySvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::PlayRequest> for PlaySvc<T> {
                        type Response = super::PlayResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PlayRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::play(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PlaySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/Pause" => {
                    #[allow(non_camel_case_types)]
                    struct PauseSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::PauseRequest> for PauseSvc<T> {
                        type Response = super::PauseResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PauseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::pause(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PauseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/Resume" => {
                    #[allow(non_camel_case_types)]
                    struct ResumeSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::ResumeRequest>
                    for ResumeSvc<T> {
                        type Response = super::ResumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::resume(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ResumeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/Next" => {
                    #[allow(non_camel_case_types)]
                    struct NextSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::NextRequest> for NextSvc<T> {
                        type Response = super::NextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::next(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/Previous" => {
                    #[allow(non_camel_case_types)]
                    struct PreviousSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::PreviousRequest>
                    for PreviousSvc<T> {
                        type Response = super::PreviousResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PreviousRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::previous(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PreviousSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/FastForwardRewind" => {
                    #[allow(non_camel_case_types)]
                    struct FastForwardRewindSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::FastForwardRewindRequest>
                    for FastForwardRewindSvc<T> {
                        type Response = super::FastForwardRewindResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FastForwardRewindRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::fast_forward_rewind(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FastForwardRewindSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/Status" => {
                    #[allow(non_camel_case_types)]
                    struct StatusSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::StatusRequest>
                    for StatusSvc<T> {
                        type Response = super::StatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/CurrentTrack" => {
                    #[allow(non_camel_case_types)]
                    struct CurrentTrackSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::CurrentTrackRequest>
                    for CurrentTrackSvc<T> {
                        type Response = super::CurrentTrackResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CurrentTrackRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::current_track(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CurrentTrackSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/FlushAndReloadTracks" => {
                    #[allow(non_camel_case_types)]
                    struct FlushAndReloadTracksSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::FlushAndReloadTracksRequest>
                    for FlushAndReloadTracksSvc<T> {
                        type Response = super::FlushAndReloadTracksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FlushAndReloadTracksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::flush_and_reload_tracks(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FlushAndReloadTracksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/GetFilePosition" => {
                    #[allow(non_camel_case_types)]
                    struct GetFilePositionSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::GetFilePositionRequest>
                    for GetFilePositionSvc<T> {
                        type Response = super::GetFilePositionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFilePositionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::get_file_position(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFilePositionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaybackService/HardStop" => {
                    #[allow(non_camel_case_types)]
                    struct HardStopSvc<T: PlaybackService>(pub Arc<T>);
                    impl<
                        T: PlaybackService,
                    > tonic::server::UnaryService<super::HardStopRequest>
                    for HardStopSvc<T> {
                        type Response = super::HardStopResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HardStopRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaybackService>::hard_stop(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HardStopSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for PlaybackServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.PlaybackService";
    impl<T> tonic::server::NamedService for PlaybackServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetResumeInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetResumeInfoResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrackInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrackInfoResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFirstIndexRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFirstIndexResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDisplayIndexRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDisplayIndexResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlaylistResumeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlaylistResumeResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResumeTrackRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResumeTrackResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetModifiedRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetModifiedResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveAllTracksRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveAllTracksResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePlaylistRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePlaylistResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertTrackRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertTrackResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertDirectoryRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertDirectoryResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertPlaylistRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertPlaylistResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShufflePlaylistRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShufflePlaylistResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WarnOnPlaylistEraseRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WarnOnPlaylistEraseResponse {}
/// Generated client implementations.
pub mod playlist_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PlaylistServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PlaylistServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PlaylistServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PlaylistServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PlaylistServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_current(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCurrentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/GetCurrent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "GetCurrent"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_resume_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetResumeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetResumeInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/GetResumeInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "GetResumeInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_track_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTrackInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTrackInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/GetTrackInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "GetTrackInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_first_index(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFirstIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFirstIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/GetFirstIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "GetFirstIndex"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_display_index(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDisplayIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDisplayIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/GetDisplayIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaylistService",
                        "GetDisplayIndex",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn amount(
            &mut self,
            request: impl tonic::IntoRequest<super::AmountRequest>,
        ) -> std::result::Result<tonic::Response<super::AmountResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/Amount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "Amount"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn playlist_resume(
            &mut self,
            request: impl tonic::IntoRequest<super::PlaylistResumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PlaylistResumeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/PlaylistResume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "PlaylistResume"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn resume_track(
            &mut self,
            request: impl tonic::IntoRequest<super::ResumeTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResumeTrackResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/ResumeTrack",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "ResumeTrack"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_modified(
            &mut self,
            request: impl tonic::IntoRequest<super::SetModifiedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetModifiedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/SetModified",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "SetModified"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn start(
            &mut self,
            request: impl tonic::IntoRequest<super::StartRequest>,
        ) -> std::result::Result<tonic::Response<super::StartResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/Start",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "Start"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sync(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncRequest>,
        ) -> std::result::Result<tonic::Response<super::SyncResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/Sync",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "Sync"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_all_tracks(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveAllTracksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveAllTracksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/RemoveAllTracks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaylistService",
                        "RemoveAllTracks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_playlist(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePlaylistResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/CreatePlaylist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "CreatePlaylist"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn insert_track(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertTrackResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/InsertTrack",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "InsertTrack"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn insert_directory(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertDirectoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertDirectoryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/InsertDirectory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaylistService",
                        "InsertDirectory",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn insert_playlist(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertPlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertPlaylistResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/InsertPlaylist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.PlaylistService", "InsertPlaylist"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn shuffle_playlist(
            &mut self,
            request: impl tonic::IntoRequest<super::ShufflePlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShufflePlaylistResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/ShufflePlaylist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaylistService",
                        "ShufflePlaylist",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn warn_on_playlist_erase(
            &mut self,
            request: impl tonic::IntoRequest<super::WarnOnPlaylistEraseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WarnOnPlaylistEraseResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.PlaylistService/WarnOnPlaylistErase",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.PlaylistService",
                        "WarnOnPlaylistErase",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod playlist_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PlaylistServiceServer.
    #[async_trait]
    pub trait PlaylistService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_current(
            &self,
            request: tonic::Request<super::GetCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCurrentResponse>,
            tonic::Status,
        >;
        async fn get_resume_info(
            &self,
            request: tonic::Request<super::GetResumeInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetResumeInfoResponse>,
            tonic::Status,
        >;
        async fn get_track_info(
            &self,
            request: tonic::Request<super::GetTrackInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTrackInfoResponse>,
            tonic::Status,
        >;
        async fn get_first_index(
            &self,
            request: tonic::Request<super::GetFirstIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFirstIndexResponse>,
            tonic::Status,
        >;
        async fn get_display_index(
            &self,
            request: tonic::Request<super::GetDisplayIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDisplayIndexResponse>,
            tonic::Status,
        >;
        async fn amount(
            &self,
            request: tonic::Request<super::AmountRequest>,
        ) -> std::result::Result<tonic::Response<super::AmountResponse>, tonic::Status>;
        async fn playlist_resume(
            &self,
            request: tonic::Request<super::PlaylistResumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PlaylistResumeResponse>,
            tonic::Status,
        >;
        async fn resume_track(
            &self,
            request: tonic::Request<super::ResumeTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResumeTrackResponse>,
            tonic::Status,
        >;
        async fn set_modified(
            &self,
            request: tonic::Request<super::SetModifiedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetModifiedResponse>,
            tonic::Status,
        >;
        async fn start(
            &self,
            request: tonic::Request<super::StartRequest>,
        ) -> std::result::Result<tonic::Response<super::StartResponse>, tonic::Status>;
        async fn sync(
            &self,
            request: tonic::Request<super::SyncRequest>,
        ) -> std::result::Result<tonic::Response<super::SyncResponse>, tonic::Status>;
        async fn remove_all_tracks(
            &self,
            request: tonic::Request<super::RemoveAllTracksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveAllTracksResponse>,
            tonic::Status,
        >;
        async fn create_playlist(
            &self,
            request: tonic::Request<super::CreatePlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePlaylistResponse>,
            tonic::Status,
        >;
        async fn insert_track(
            &self,
            request: tonic::Request<super::InsertTrackRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertTrackResponse>,
            tonic::Status,
        >;
        async fn insert_directory(
            &self,
            request: tonic::Request<super::InsertDirectoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertDirectoryResponse>,
            tonic::Status,
        >;
        async fn insert_playlist(
            &self,
            request: tonic::Request<super::InsertPlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertPlaylistResponse>,
            tonic::Status,
        >;
        async fn shuffle_playlist(
            &self,
            request: tonic::Request<super::ShufflePlaylistRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShufflePlaylistResponse>,
            tonic::Status,
        >;
        async fn warn_on_playlist_erase(
            &self,
            request: tonic::Request<super::WarnOnPlaylistEraseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WarnOnPlaylistEraseResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct PlaylistServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PlaylistServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PlaylistServiceServer<T>
    where
        T: PlaylistService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rockbox.v1alpha1.PlaylistService/GetCurrent" => {
                    #[allow(non_camel_case_types)]
                    struct GetCurrentSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::GetCurrentRequest>
                    for GetCurrentSvc<T> {
                        type Response = super::GetCurrentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCurrentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::get_current(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCurrentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/GetResumeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetResumeInfoSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::GetResumeInfoRequest>
                    for GetResumeInfoSvc<T> {
                        type Response = super::GetResumeInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetResumeInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::get_resume_info(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetResumeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/GetTrackInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetTrackInfoSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::GetTrackInfoRequest>
                    for GetTrackInfoSvc<T> {
                        type Response = super::GetTrackInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTrackInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::get_track_info(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTrackInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/GetFirstIndex" => {
                    #[allow(non_camel_case_types)]
                    struct GetFirstIndexSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::GetFirstIndexRequest>
                    for GetFirstIndexSvc<T> {
                        type Response = super::GetFirstIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFirstIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::get_first_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFirstIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/GetDisplayIndex" => {
                    #[allow(non_camel_case_types)]
                    struct GetDisplayIndexSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::GetDisplayIndexRequest>
                    for GetDisplayIndexSvc<T> {
                        type Response = super::GetDisplayIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDisplayIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::get_display_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDisplayIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/Amount" => {
                    #[allow(non_camel_case_types)]
                    struct AmountSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::AmountRequest>
                    for AmountSvc<T> {
                        type Response = super::AmountResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AmountRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::amount(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AmountSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/PlaylistResume" => {
                    #[allow(non_camel_case_types)]
                    struct PlaylistResumeSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::PlaylistResumeRequest>
                    for PlaylistResumeSvc<T> {
                        type Response = super::PlaylistResumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PlaylistResumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::playlist_resume(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PlaylistResumeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/ResumeTrack" => {
                    #[allow(non_camel_case_types)]
                    struct ResumeTrackSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::ResumeTrackRequest>
                    for ResumeTrackSvc<T> {
                        type Response = super::ResumeTrackResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResumeTrackRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::resume_track(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ResumeTrackSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/SetModified" => {
                    #[allow(non_camel_case_types)]
                    struct SetModifiedSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::SetModifiedRequest>
                    for SetModifiedSvc<T> {
                        type Response = super::SetModifiedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetModifiedRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::set_modified(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetModifiedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/Start" => {
                    #[allow(non_camel_case_types)]
                    struct StartSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::StartRequest> for StartSvc<T> {
                        type Response = super::StartResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StartRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::start(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/Sync" => {
                    #[allow(non_camel_case_types)]
                    struct SyncSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::SyncRequest> for SyncSvc<T> {
                        type Response = super::SyncResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SyncRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::sync(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SyncSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/RemoveAllTracks" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveAllTracksSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::RemoveAllTracksRequest>
                    for RemoveAllTracksSvc<T> {
                        type Response = super::RemoveAllTracksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveAllTracksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::remove_all_tracks(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveAllTracksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/CreatePlaylist" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePlaylistSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::CreatePlaylistRequest>
                    for CreatePlaylistSvc<T> {
                        type Response = super::CreatePlaylistResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePlaylistRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::create_playlist(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePlaylistSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/InsertTrack" => {
                    #[allow(non_camel_case_types)]
                    struct InsertTrackSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::InsertTrackRequest>
                    for InsertTrackSvc<T> {
                        type Response = super::InsertTrackResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertTrackRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::insert_track(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertTrackSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/InsertDirectory" => {
                    #[allow(non_camel_case_types)]
                    struct InsertDirectorySvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::InsertDirectoryRequest>
                    for InsertDirectorySvc<T> {
                        type Response = super::InsertDirectoryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertDirectoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::insert_directory(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertDirectorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/InsertPlaylist" => {
                    #[allow(non_camel_case_types)]
                    struct InsertPlaylistSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::InsertPlaylistRequest>
                    for InsertPlaylistSvc<T> {
                        type Response = super::InsertPlaylistResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertPlaylistRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::insert_playlist(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertPlaylistSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/ShufflePlaylist" => {
                    #[allow(non_camel_case_types)]
                    struct ShufflePlaylistSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::ShufflePlaylistRequest>
                    for ShufflePlaylistSvc<T> {
                        type Response = super::ShufflePlaylistResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShufflePlaylistRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::shuffle_playlist(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ShufflePlaylistSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.PlaylistService/WarnOnPlaylistErase" => {
                    #[allow(non_camel_case_types)]
                    struct WarnOnPlaylistEraseSvc<T: PlaylistService>(pub Arc<T>);
                    impl<
                        T: PlaylistService,
                    > tonic::server::UnaryService<super::WarnOnPlaylistEraseRequest>
                    for WarnOnPlaylistEraseSvc<T> {
                        type Response = super::WarnOnPlaylistEraseResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WarnOnPlaylistEraseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PlaylistService>::warn_on_playlist_erase(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WarnOnPlaylistEraseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for PlaylistServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.PlaylistService";
    impl<T> tonic::server::NamedService for PlaylistServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSettingsListRequest {
    #[prost(int32, tag = "1")]
    pub count: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSettingsListResponse {}
/// Generated client implementations.
pub mod settings_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SettingsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SettingsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SettingsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SettingsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SettingsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_settings_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSettingsListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSettingsListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SettingsService/GetSettingsList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.SettingsService",
                        "GetSettingsList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod settings_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SettingsServiceServer.
    #[async_trait]
    pub trait SettingsService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_settings_list(
            &self,
            request: tonic::Request<super::GetSettingsListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSettingsListResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SettingsServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SettingsServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SettingsServiceServer<T>
    where
        T: SettingsService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rockbox.v1alpha1.SettingsService/GetSettingsList" => {
                    #[allow(non_camel_case_types)]
                    struct GetSettingsListSvc<T: SettingsService>(pub Arc<T>);
                    impl<
                        T: SettingsService,
                    > tonic::server::UnaryService<super::GetSettingsListRequest>
                    for GetSettingsListSvc<T> {
                        type Response = super::GetSettingsListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSettingsListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SettingsService>::get_settings_list(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSettingsListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for SettingsServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.SettingsService";
    impl<T> tonic::server::NamedService for SettingsServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdjustVolumeRequest {
    #[prost(int32, tag = "1")]
    pub steps: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdjustVolumeResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundSetRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
    #[prost(int32, tag = "2")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundSetResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundCurrentRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundCurrentResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundDefaultRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundDefaultResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundMinRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundMinResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundMaxRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundMaxResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundUnitRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundUnitResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundVal2PhysRequest {
    #[prost(int32, tag = "1")]
    pub setting: i32,
    #[prost(int32, tag = "2")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SoundVal2PhysResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPitchRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPitchResponse {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPitchRequest {
    #[prost(int32, tag = "1")]
    pub value: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPitchResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeepPlayRequest {
    #[prost(uint32, tag = "1")]
    pub frequency: u32,
    #[prost(uint32, tag = "2")]
    pub duration: u32,
    #[prost(uint32, tag = "3")]
    pub amplitude: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeepPlayResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PcmbufFadeRequest {
    #[prost(int32, tag = "1")]
    pub fade: i32,
    #[prost(bool, tag = "2")]
    pub r#in: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PcmbufFadeResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PcmbufSetLowLatencyRequest {
    #[prost(bool, tag = "1")]
    pub state: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PcmbufSetLowLatencyResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SystemSoundPlayRequest {
    #[prost(uint32, tag = "1")]
    pub sound: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SystemSoundPlayResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KeyclickClickRequest {
    #[prost(bool, tag = "1")]
    pub rawbutton: bool,
    #[prost(int32, tag = "2")]
    pub action: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KeyclickClickResponse {}
/// Generated client implementations.
pub mod sound_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SoundServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SoundServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SoundServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SoundServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SoundServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn adjust_volume(
            &mut self,
            request: impl tonic::IntoRequest<super::AdjustVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AdjustVolumeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/AdjustVolume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "AdjustVolume"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_set(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundSetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundSetResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundSet",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundSet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_current(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundCurrentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundCurrent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundCurrent"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_default(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundDefaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundDefaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundDefault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundDefault"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_min(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundMinRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundMinResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundMin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundMin"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_max(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundMaxRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundMaxResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundMax",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundMax"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_unit(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundUnitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundUnitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundUnit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundUnit"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sound_val2_phys(
            &mut self,
            request: impl tonic::IntoRequest<super::SoundVal2PhysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundVal2PhysResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SoundVal2Phys",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "SoundVal2Phys"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_pitch(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPitchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPitchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/GetPitch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "GetPitch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_pitch(
            &mut self,
            request: impl tonic::IntoRequest<super::SetPitchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetPitchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SetPitch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "SetPitch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn beep_play(
            &mut self,
            request: impl tonic::IntoRequest<super::BeepPlayRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BeepPlayResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/BeepPlay",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "BeepPlay"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn pcmbuf_fade(
            &mut self,
            request: impl tonic::IntoRequest<super::PcmbufFadeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PcmbufFadeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/PcmbufFade",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rockbox.v1alpha1.SoundService", "PcmbufFade"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn pcmbuf_set_low_latency(
            &mut self,
            request: impl tonic::IntoRequest<super::PcmbufSetLowLatencyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PcmbufSetLowLatencyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/PcmbufSetLowLatency",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rockbox.v1alpha1.SoundService",
                        "PcmbufSetLowLatency",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn system_sound_play(
            &mut self,
            request: impl tonic::IntoRequest<super::SystemSoundPlayRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SystemSoundPlayResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/SystemSoundPlay",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "SystemSoundPlay"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn keyclick_click(
            &mut self,
            request: impl tonic::IntoRequest<super::KeyclickClickRequest>,
        ) -> std::result::Result<
            tonic::Response<super::KeyclickClickResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rockbox.v1alpha1.SoundService/KeyclickClick",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rockbox.v1alpha1.SoundService", "KeyclickClick"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod sound_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SoundServiceServer.
    #[async_trait]
    pub trait SoundService: std::marker::Send + std::marker::Sync + 'static {
        async fn adjust_volume(
            &self,
            request: tonic::Request<super::AdjustVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AdjustVolumeResponse>,
            tonic::Status,
        >;
        async fn sound_set(
            &self,
            request: tonic::Request<super::SoundSetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundSetResponse>,
            tonic::Status,
        >;
        async fn sound_current(
            &self,
            request: tonic::Request<super::SoundCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundCurrentResponse>,
            tonic::Status,
        >;
        async fn sound_default(
            &self,
            request: tonic::Request<super::SoundDefaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundDefaultResponse>,
            tonic::Status,
        >;
        async fn sound_min(
            &self,
            request: tonic::Request<super::SoundMinRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundMinResponse>,
            tonic::Status,
        >;
        async fn sound_max(
            &self,
            request: tonic::Request<super::SoundMaxRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundMaxResponse>,
            tonic::Status,
        >;
        async fn sound_unit(
            &self,
            request: tonic::Request<super::SoundUnitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundUnitResponse>,
            tonic::Status,
        >;
        async fn sound_val2_phys(
            &self,
            request: tonic::Request<super::SoundVal2PhysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SoundVal2PhysResponse>,
            tonic::Status,
        >;
        async fn get_pitch(
            &self,
            request: tonic::Request<super::GetPitchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPitchResponse>,
            tonic::Status,
        >;
        async fn set_pitch(
            &self,
            request: tonic::Request<super::SetPitchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetPitchResponse>,
            tonic::Status,
        >;
        async fn beep_play(
            &self,
            request: tonic::Request<super::BeepPlayRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BeepPlayResponse>,
            tonic::Status,
        >;
        async fn pcmbuf_fade(
            &self,
            request: tonic::Request<super::PcmbufFadeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PcmbufFadeResponse>,
            tonic::Status,
        >;
        async fn pcmbuf_set_low_latency(
            &self,
            request: tonic::Request<super::PcmbufSetLowLatencyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PcmbufSetLowLatencyResponse>,
            tonic::Status,
        >;
        async fn system_sound_play(
            &self,
            request: tonic::Request<super::SystemSoundPlayRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SystemSoundPlayResponse>,
            tonic::Status,
        >;
        async fn keyclick_click(
            &self,
            request: tonic::Request<super::KeyclickClickRequest>,
        ) -> std::result::Result<
            tonic::Response<super::KeyclickClickResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SoundServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SoundServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SoundServiceServer<T>
    where
        T: SoundService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rockbox.v1alpha1.SoundService/AdjustVolume" => {
                    #[allow(non_camel_case_types)]
                    struct AdjustVolumeSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::AdjustVolumeRequest>
                    for AdjustVolumeSvc<T> {
                        type Response = super::AdjustVolumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AdjustVolumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::adjust_volume(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AdjustVolumeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundSet" => {
                    #[allow(non_camel_case_types)]
                    struct SoundSetSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundSetRequest>
                    for SoundSetSvc<T> {
                        type Response = super::SoundSetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundSetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundSetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundCurrent" => {
                    #[allow(non_camel_case_types)]
                    struct SoundCurrentSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundCurrentRequest>
                    for SoundCurrentSvc<T> {
                        type Response = super::SoundCurrentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundCurrentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_current(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundCurrentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundDefault" => {
                    #[allow(non_camel_case_types)]
                    struct SoundDefaultSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundDefaultRequest>
                    for SoundDefaultSvc<T> {
                        type Response = super::SoundDefaultResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundDefaultRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_default(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundDefaultSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundMin" => {
                    #[allow(non_camel_case_types)]
                    struct SoundMinSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundMinRequest>
                    for SoundMinSvc<T> {
                        type Response = super::SoundMinResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundMinRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_min(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundMinSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundMax" => {
                    #[allow(non_camel_case_types)]
                    struct SoundMaxSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundMaxRequest>
                    for SoundMaxSvc<T> {
                        type Response = super::SoundMaxResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundMaxRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_max(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundMaxSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundUnit" => {
                    #[allow(non_camel_case_types)]
                    struct SoundUnitSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundUnitRequest>
                    for SoundUnitSvc<T> {
                        type Response = super::SoundUnitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundUnitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_unit(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundUnitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SoundVal2Phys" => {
                    #[allow(non_camel_case_types)]
                    struct SoundVal2PhysSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SoundVal2PhysRequest>
                    for SoundVal2PhysSvc<T> {
                        type Response = super::SoundVal2PhysResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SoundVal2PhysRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::sound_val2_phys(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SoundVal2PhysSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/GetPitch" => {
                    #[allow(non_camel_case_types)]
                    struct GetPitchSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::GetPitchRequest>
                    for GetPitchSvc<T> {
                        type Response = super::GetPitchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPitchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::get_pitch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPitchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SetPitch" => {
                    #[allow(non_camel_case_types)]
                    struct SetPitchSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SetPitchRequest>
                    for SetPitchSvc<T> {
                        type Response = super::SetPitchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetPitchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::set_pitch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetPitchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/BeepPlay" => {
                    #[allow(non_camel_case_types)]
                    struct BeepPlaySvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::BeepPlayRequest>
                    for BeepPlaySvc<T> {
                        type Response = super::BeepPlayResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BeepPlayRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::beep_play(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BeepPlaySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/PcmbufFade" => {
                    #[allow(non_camel_case_types)]
                    struct PcmbufFadeSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::PcmbufFadeRequest>
                    for PcmbufFadeSvc<T> {
                        type Response = super::PcmbufFadeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PcmbufFadeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::pcmbuf_fade(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PcmbufFadeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/PcmbufSetLowLatency" => {
                    #[allow(non_camel_case_types)]
                    struct PcmbufSetLowLatencySvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::PcmbufSetLowLatencyRequest>
                    for PcmbufSetLowLatencySvc<T> {
                        type Response = super::PcmbufSetLowLatencyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PcmbufSetLowLatencyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::pcmbuf_set_low_latency(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PcmbufSetLowLatencySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/SystemSoundPlay" => {
                    #[allow(non_camel_case_types)]
                    struct SystemSoundPlaySvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::SystemSoundPlayRequest>
                    for SystemSoundPlaySvc<T> {
                        type Response = super::SystemSoundPlayResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SystemSoundPlayRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::system_sound_play(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SystemSoundPlaySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rockbox.v1alpha1.SoundService/KeyclickClick" => {
                    #[allow(non_camel_case_types)]
                    struct KeyclickClickSvc<T: SoundService>(pub Arc<T>);
                    impl<
                        T: SoundService,
                    > tonic::server::UnaryService<super::KeyclickClickRequest>
                    for KeyclickClickSvc<T> {
                        type Response = super::KeyclickClickResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KeyclickClickRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SoundService>::keyclick_click(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KeyclickClickSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for SoundServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.SoundService";
    impl<T> tonic::server::NamedService for SoundServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated client implementations.
pub mod tagcache_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TagcacheServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TagcacheServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TagcacheServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TagcacheServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TagcacheServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
    }
}
/// Generated server implementations.
pub mod tagcache_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TagcacheServiceServer.
    #[async_trait]
    pub trait TagcacheService: std::marker::Send + std::marker::Sync + 'static {}
    #[derive(Debug)]
    pub struct TagcacheServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TagcacheServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TagcacheServiceServer<T>
    where
        T: TagcacheService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for TagcacheServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rockbox.v1alpha1.TagcacheService";
    impl<T> tonic::server::NamedService for TagcacheServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
