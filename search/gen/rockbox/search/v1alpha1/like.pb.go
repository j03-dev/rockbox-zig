// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: rockbox/search/v1alpha1/like.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LikedAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Artist     string  `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	Year       uint32  `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
	YearString string  `protobuf:"bytes,5,opt,name=year_string,json=yearString,proto3" json:"year_string,omitempty"`
	AlbumArt   *string `protobuf:"bytes,6,opt,name=album_art,json=albumArt,proto3,oneof" json:"album_art,omitempty"`
	Md5        string  `protobuf:"bytes,7,opt,name=md5,proto3" json:"md5,omitempty"`
	ArtistId   string  `protobuf:"bytes,8,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
}

func (x *LikedAlbum) Reset() {
	*x = LikedAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikedAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikedAlbum) ProtoMessage() {}

func (x *LikedAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikedAlbum.ProtoReflect.Descriptor instead.
func (*LikedAlbum) Descriptor() ([]byte, []int) {
	return file_rockbox_search_v1alpha1_like_proto_rawDescGZIP(), []int{0}
}

func (x *LikedAlbum) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LikedAlbum) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LikedAlbum) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *LikedAlbum) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *LikedAlbum) GetYearString() string {
	if x != nil {
		return x.YearString
	}
	return ""
}

func (x *LikedAlbum) GetAlbumArt() string {
	if x != nil && x.AlbumArt != nil {
		return *x.AlbumArt
	}
	return ""
}

func (x *LikedAlbum) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *LikedAlbum) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type LikedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path        string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Title       string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Artist      string  `protobuf:"bytes,4,opt,name=artist,proto3" json:"artist,omitempty"`
	Album       string  `protobuf:"bytes,5,opt,name=album,proto3" json:"album,omitempty"`
	AlbumArtist string  `protobuf:"bytes,6,opt,name=album_artist,json=albumArtist,proto3" json:"album_artist,omitempty"`
	Bitrate     uint32  `protobuf:"varint,7,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Composer    string  `protobuf:"bytes,8,opt,name=composer,proto3" json:"composer,omitempty"`
	DiscNumber  uint32  `protobuf:"varint,9,opt,name=disc_number,json=discNumber,proto3" json:"disc_number,omitempty"`
	Filesize    uint32  `protobuf:"varint,10,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Frequency   uint32  `protobuf:"varint,11,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Length      uint32  `protobuf:"varint,12,opt,name=length,proto3" json:"length,omitempty"`
	TrackNumber uint32  `protobuf:"varint,13,opt,name=track_number,json=trackNumber,proto3" json:"track_number,omitempty"`
	Year        uint32  `protobuf:"varint,14,opt,name=year,proto3" json:"year,omitempty"`
	YearString  string  `protobuf:"bytes,15,opt,name=year_string,json=yearString,proto3" json:"year_string,omitempty"`
	Genre       string  `protobuf:"bytes,16,opt,name=genre,proto3" json:"genre,omitempty"`
	Md5         string  `protobuf:"bytes,17,opt,name=md5,proto3" json:"md5,omitempty"`
	AlbumArt    *string `protobuf:"bytes,18,opt,name=album_art,json=albumArt,proto3,oneof" json:"album_art,omitempty"`
	ArtistId    *string `protobuf:"bytes,19,opt,name=artist_id,json=artistId,proto3,oneof" json:"artist_id,omitempty"`
	AlbumId     *string `protobuf:"bytes,20,opt,name=album_id,json=albumId,proto3,oneof" json:"album_id,omitempty"`
	GenreId     *string `protobuf:"bytes,21,opt,name=genre_id,json=genreId,proto3,oneof" json:"genre_id,omitempty"`
	CreatedAt   string  `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string  `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *LikedTrack) Reset() {
	*x = LikedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikedTrack) ProtoMessage() {}

func (x *LikedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikedTrack.ProtoReflect.Descriptor instead.
func (*LikedTrack) Descriptor() ([]byte, []int) {
	return file_rockbox_search_v1alpha1_like_proto_rawDescGZIP(), []int{1}
}

func (x *LikedTrack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LikedTrack) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LikedTrack) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LikedTrack) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *LikedTrack) GetAlbum() string {
	if x != nil {
		return x.Album
	}
	return ""
}

func (x *LikedTrack) GetAlbumArtist() string {
	if x != nil {
		return x.AlbumArtist
	}
	return ""
}

func (x *LikedTrack) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *LikedTrack) GetComposer() string {
	if x != nil {
		return x.Composer
	}
	return ""
}

func (x *LikedTrack) GetDiscNumber() uint32 {
	if x != nil {
		return x.DiscNumber
	}
	return 0
}

func (x *LikedTrack) GetFilesize() uint32 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *LikedTrack) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *LikedTrack) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *LikedTrack) GetTrackNumber() uint32 {
	if x != nil {
		return x.TrackNumber
	}
	return 0
}

func (x *LikedTrack) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *LikedTrack) GetYearString() string {
	if x != nil {
		return x.YearString
	}
	return ""
}

func (x *LikedTrack) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *LikedTrack) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *LikedTrack) GetAlbumArt() string {
	if x != nil && x.AlbumArt != nil {
		return *x.AlbumArt
	}
	return ""
}

func (x *LikedTrack) GetArtistId() string {
	if x != nil && x.ArtistId != nil {
		return *x.ArtistId
	}
	return ""
}

func (x *LikedTrack) GetAlbumId() string {
	if x != nil && x.AlbumId != nil {
		return *x.AlbumId
	}
	return ""
}

func (x *LikedTrack) GetGenreId() string {
	if x != nil && x.GenreId != nil {
		return *x.GenreId
	}
	return ""
}

func (x *LikedTrack) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LikedTrack) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type LikedAlbumList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Albums []*LikedAlbum `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
}

func (x *LikedAlbumList) Reset() {
	*x = LikedAlbumList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikedAlbumList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikedAlbumList) ProtoMessage() {}

func (x *LikedAlbumList) ProtoReflect() protoreflect.Message {
	mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikedAlbumList.ProtoReflect.Descriptor instead.
func (*LikedAlbumList) Descriptor() ([]byte, []int) {
	return file_rockbox_search_v1alpha1_like_proto_rawDescGZIP(), []int{2}
}

func (x *LikedAlbumList) GetAlbums() []*LikedAlbum {
	if x != nil {
		return x.Albums
	}
	return nil
}

type LikedTrackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*LikedTrack `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *LikedTrackList) Reset() {
	*x = LikedTrackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikedTrackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikedTrackList) ProtoMessage() {}

func (x *LikedTrackList) ProtoReflect() protoreflect.Message {
	mi := &file_rockbox_search_v1alpha1_like_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikedTrackList.ProtoReflect.Descriptor instead.
func (*LikedTrackList) Descriptor() ([]byte, []int) {
	return file_rockbox_search_v1alpha1_like_proto_rawDescGZIP(), []int{3}
}

func (x *LikedTrackList) GetTracks() []*LikedTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_rockbox_search_v1alpha1_like_proto protoreflect.FileDescriptor

var file_rockbox_search_v1alpha1_like_proto_rawDesc = []byte{
	0x0a, 0x22, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xde, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x41, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x22, 0xb8,
	0x05, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x65, 0x61, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64,
	0x35, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x41, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0e, 0x4c, 0x69, 0x6b,
	0x65, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x73, 0x69, 0x72, 0x79, 0x73, 0x6e, 0x64, 0x72, 0x2f,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2d, 0x7a, 0x69, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rockbox_search_v1alpha1_like_proto_rawDescOnce sync.Once
	file_rockbox_search_v1alpha1_like_proto_rawDescData = file_rockbox_search_v1alpha1_like_proto_rawDesc
)

func file_rockbox_search_v1alpha1_like_proto_rawDescGZIP() []byte {
	file_rockbox_search_v1alpha1_like_proto_rawDescOnce.Do(func() {
		file_rockbox_search_v1alpha1_like_proto_rawDescData = protoimpl.X.CompressGZIP(file_rockbox_search_v1alpha1_like_proto_rawDescData)
	})
	return file_rockbox_search_v1alpha1_like_proto_rawDescData
}

var file_rockbox_search_v1alpha1_like_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rockbox_search_v1alpha1_like_proto_goTypes = []interface{}{
	(*LikedAlbum)(nil),     // 0: rockbox.search.v1alpha1.LikedAlbum
	(*LikedTrack)(nil),     // 1: rockbox.search.v1alpha1.LikedTrack
	(*LikedAlbumList)(nil), // 2: rockbox.search.v1alpha1.LikedAlbumList
	(*LikedTrackList)(nil), // 3: rockbox.search.v1alpha1.LikedTrackList
}
var file_rockbox_search_v1alpha1_like_proto_depIdxs = []int32{
	0, // 0: rockbox.search.v1alpha1.LikedAlbumList.albums:type_name -> rockbox.search.v1alpha1.LikedAlbum
	1, // 1: rockbox.search.v1alpha1.LikedTrackList.tracks:type_name -> rockbox.search.v1alpha1.LikedTrack
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_rockbox_search_v1alpha1_like_proto_init() }
func file_rockbox_search_v1alpha1_like_proto_init() {
	if File_rockbox_search_v1alpha1_like_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rockbox_search_v1alpha1_like_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikedAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockbox_search_v1alpha1_like_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockbox_search_v1alpha1_like_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikedAlbumList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rockbox_search_v1alpha1_like_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikedTrackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rockbox_search_v1alpha1_like_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rockbox_search_v1alpha1_like_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rockbox_search_v1alpha1_like_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rockbox_search_v1alpha1_like_proto_goTypes,
		DependencyIndexes: file_rockbox_search_v1alpha1_like_proto_depIdxs,
		MessageInfos:      file_rockbox_search_v1alpha1_like_proto_msgTypes,
	}.Build()
	File_rockbox_search_v1alpha1_like_proto = out.File
	file_rockbox_search_v1alpha1_like_proto_rawDesc = nil
	file_rockbox_search_v1alpha1_like_proto_goTypes = nil
	file_rockbox_search_v1alpha1_like_proto_depIdxs = nil
}
